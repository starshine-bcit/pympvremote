# Form implementation generated from reading ui file '.\mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 480)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalSliderPlayBack = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSliderPlayBack.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSliderPlayBack.setObjectName("horizontalSliderPlayBack")
        self.verticalLayout_3.addWidget(self.horizontalSliderPlayBack)
        self.splitterMain = QtWidgets.QSplitter(self.centralwidget)
        self.splitterMain.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.splitterMain.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.splitterMain.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitterMain.setChildrenCollapsible(False)
        self.splitterMain.setObjectName("splitterMain")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.splitterMain)
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayoutLeft = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayoutLeft.setContentsMargins(0, 0, 0, 0)
        self.verticalLayoutLeft.setObjectName("verticalLayoutLeft")
        self.tabWidget = QtWidgets.QTabWidget(self.verticalLayoutWidget_2)
        self.tabWidget.setMinimumSize(QtCore.QSize(200, 200))
        self.tabWidget.setObjectName("tabWidget")
        self.tabRemoteFiles = QtWidgets.QWidget()
        self.tabRemoteFiles.setObjectName("tabRemoteFiles")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.tabRemoteFiles)
        self.verticalLayout.setObjectName("verticalLayout")
        self.listWidgetRemoteFiles = QtWidgets.QListWidget(self.tabRemoteFiles)
        self.listWidgetRemoteFiles.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.DoubleClicked)
        self.listWidgetRemoteFiles.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.MultiSelection)
        self.listWidgetRemoteFiles.setObjectName("listWidgetRemoteFiles")
        self.verticalLayout.addWidget(self.listWidgetRemoteFiles)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/assets/icons/server.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tabWidget.addTab(self.tabRemoteFiles, icon, "")
        self.tabURL = QtWidgets.QWidget()
        self.tabURL.setObjectName("tabURL")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tabURL)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.splitterURL = QtWidgets.QSplitter(self.tabURL)
        self.splitterURL.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.splitterURL.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.splitterURL.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.splitterURL.setOpaqueResize(True)
        self.splitterURL.setChildrenCollapsible(False)
        self.splitterURL.setObjectName("splitterURL")
        self.listWidgetURL = QtWidgets.QListWidget(self.splitterURL)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listWidgetURL.sizePolicy().hasHeightForWidth())
        self.listWidgetURL.setSizePolicy(sizePolicy)
        self.listWidgetURL.setMinimumSize(QtCore.QSize(0, 0))
        self.listWidgetURL.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.DoubleClicked)
        self.listWidgetURL.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.MultiSelection)
        self.listWidgetURL.setObjectName("listWidgetURL")
        self.plainTextEditURL = QtWidgets.QPlainTextEdit(self.splitterURL)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plainTextEditURL.sizePolicy().hasHeightForWidth())
        self.plainTextEditURL.setSizePolicy(sizePolicy)
        self.plainTextEditURL.setMinimumSize(QtCore.QSize(150, 30))
        self.plainTextEditURL.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.plainTextEditURL.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhMultiLine|QtCore.Qt.InputMethodHint.ImhUrlCharactersOnly)
        self.plainTextEditURL.setObjectName("plainTextEditURL")
        self.verticalLayout_2.addWidget(self.splitterURL)
        self.horizontalLayoutURLButtons = QtWidgets.QHBoxLayout()
        self.horizontalLayoutURLButtons.setObjectName("horizontalLayoutURLButtons")
        self.commandLinkButtonAppendURL = QtWidgets.QCommandLinkButton(self.tabURL)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.commandLinkButtonAppendURL.sizePolicy().hasHeightForWidth())
        self.commandLinkButtonAppendURL.setSizePolicy(sizePolicy)
        self.commandLinkButtonAppendURL.setMinimumSize(QtCore.QSize(50, 0))
        self.commandLinkButtonAppendURL.setMaximumSize(QtCore.QSize(100, 16777215))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/assets/icons/file-symlink.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.commandLinkButtonAppendURL.setIcon(icon1)
        self.commandLinkButtonAppendURL.setObjectName("commandLinkButtonAppendURL")
        self.horizontalLayoutURLButtons.addWidget(self.commandLinkButtonAppendURL)
        self.commandLinkButtonRemoveURL = QtWidgets.QCommandLinkButton(self.tabURL)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.commandLinkButtonRemoveURL.sizePolicy().hasHeightForWidth())
        self.commandLinkButtonRemoveURL.setSizePolicy(sizePolicy)
        self.commandLinkButtonRemoveURL.setMinimumSize(QtCore.QSize(50, 0))
        self.commandLinkButtonRemoveURL.setMaximumSize(QtCore.QSize(100, 16777215))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/assets/icons/file-output.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.commandLinkButtonRemoveURL.setIcon(icon2)
        self.commandLinkButtonRemoveURL.setObjectName("commandLinkButtonRemoveURL")
        self.horizontalLayoutURLButtons.addWidget(self.commandLinkButtonRemoveURL)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutURLButtons.addItem(spacerItem)
        self.verticalLayout_2.addLayout(self.horizontalLayoutURLButtons)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/assets/icons/cloud.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tabWidget.addTab(self.tabURL, icon3, "")
        self.verticalLayoutLeft.addWidget(self.tabWidget)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.splitterMain)
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayoutRight = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayoutRight.setContentsMargins(0, 0, 0, 0)
        self.verticalLayoutRight.setObjectName("verticalLayoutRight")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayoutRight.addWidget(self.label)
        self.listWidgetPlaylist = QtWidgets.QListWidget(self.verticalLayoutWidget)
        self.listWidgetPlaylist.setMinimumSize(QtCore.QSize(150, 180))
        self.listWidgetPlaylist.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.listWidgetPlaylist.setDragEnabled(True)
        self.listWidgetPlaylist.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.listWidgetPlaylist.setObjectName("listWidgetPlaylist")
        self.verticalLayoutRight.addWidget(self.listWidgetPlaylist)
        self.verticalLayout_3.addWidget(self.splitterMain)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBarTop = QtWidgets.QToolBar(MainWindow)
        self.toolBarTop.setIconSize(QtCore.QSize(40, 40))
        self.toolBarTop.setObjectName("toolBarTop")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBarTop)
        self.toolBarRight = QtWidgets.QToolBar(MainWindow)
        self.toolBarRight.setIconSize(QtCore.QSize(40, 40))
        self.toolBarRight.setObjectName("toolBarRight")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.RightToolBarArea, self.toolBarRight)
        self.actionPause = QtGui.QAction(MainWindow)
        self.actionPause.setCheckable(True)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/assets/icons/pause.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionPause.setIcon(icon4)
        self.actionPause.setObjectName("actionPause")
        self.actionPlayPlaylist = QtGui.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/assets/icons/play.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionPlayPlaylist.setIcon(icon5)
        self.actionPlayPlaylist.setObjectName("actionPlayPlaylist")
        self.actionNext = QtGui.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/assets/icons/skip-forward.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionNext.setIcon(icon6)
        self.actionNext.setObjectName("actionNext")
        self.actionPrevious = QtGui.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/assets/icons/skip-back.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionPrevious.setIcon(icon7)
        self.actionPrevious.setObjectName("actionPrevious")
        self.actionStream = QtGui.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icons/assets/icons/airplay.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionStream.setIcon(icon8)
        self.actionStream.setObjectName("actionStream")
        self.actionAppend = QtGui.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/icons/assets/icons/file-plus.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAppend.setIcon(icon9)
        self.actionAppend.setObjectName("actionAppend")
        self.actionRemove = QtGui.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/icons/assets/icons/file-minus.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRemove.setIcon(icon10)
        self.actionRemove.setObjectName("actionRemove")
        self.actionMute = QtGui.QAction(MainWindow)
        self.actionMute.setCheckable(True)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/icons/assets/icons/volume-x.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionMute.setIcon(icon11)
        self.actionMute.setObjectName("actionMute")
        self.actionFullscreen = QtGui.QAction(MainWindow)
        self.actionFullscreen.setCheckable(True)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/icons/assets/icons/scaling.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionFullscreen.setIcon(icon12)
        self.actionFullscreen.setObjectName("actionFullscreen")
        self.actionRefreshFiles = QtGui.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/icons/assets/icons/refresh-cw.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRefreshFiles.setIcon(icon13)
        self.actionRefreshFiles.setObjectName("actionRefreshFiles")
        self.actionUpload = QtGui.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/icons/assets/icons/upload.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionUpload.setIcon(icon14)
        self.actionUpload.setObjectName("actionUpload")
        self.actionClear = QtGui.QAction(MainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(":/icons/assets/icons/file-x.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear.setIcon(icon15)
        self.actionClear.setObjectName("actionClear")
        self.actionExit = QtGui.QAction(MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(":/icons/assets/icons/log-out.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon16)
        self.actionExit.setObjectName("actionExit")
        self.actionRepeat = QtGui.QAction(MainWindow)
        self.actionRepeat.setCheckable(True)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(":/icons/assets/icons/repeat.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRepeat.setIcon(icon17)
        self.actionRepeat.setObjectName("actionRepeat")
        self.actionStop = QtGui.QAction(MainWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(":/icons/assets/icons/stop-circle.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionStop.setIcon(icon18)
        self.actionStop.setObjectName("actionStop")
        self.toolBarTop.addAction(self.actionStop)
        self.toolBarTop.addAction(self.actionPause)
        self.toolBarTop.addSeparator()
        self.toolBarTop.addAction(self.actionPrevious)
        self.toolBarTop.addAction(self.actionNext)
        self.toolBarTop.addSeparator()
        self.toolBarTop.addAction(self.actionMute)
        self.toolBarTop.addAction(self.actionFullscreen)
        self.toolBarTop.addAction(self.actionRepeat)
        self.toolBarTop.addSeparator()
        self.toolBarTop.addAction(self.actionStream)
        self.toolBarTop.addAction(self.actionUpload)
        self.toolBarTop.addSeparator()
        self.toolBarTop.addAction(self.actionExit)
        self.toolBarRight.addAction(self.actionPlayPlaylist)
        self.toolBarRight.addSeparator()
        self.toolBarRight.addAction(self.actionAppend)
        self.toolBarRight.addAction(self.actionRemove)
        self.toolBarRight.addSeparator()
        self.toolBarRight.addAction(self.actionRefreshFiles)
        self.toolBarRight.addSeparator()
        self.toolBarRight.addAction(self.actionClear)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "pympvremote"))
        self.horizontalSliderPlayBack.setToolTip(_translate("MainWindow", "Playback Position"))
        self.listWidgetRemoteFiles.setSortingEnabled(True)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabRemoteFiles), _translate("MainWindow", "Remote Files"))
        self.plainTextEditURL.setPlaceholderText(_translate("MainWindow", "Paste Line Seperated URLs Here"))
        self.commandLinkButtonAppendURL.setText(_translate("MainWindow", "Add"))
        self.commandLinkButtonRemoveURL.setText(_translate("MainWindow", "Remove"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabURL), _translate("MainWindow", "URLs"))
        self.label.setText(_translate("MainWindow", "Playlist"))
        self.toolBarTop.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.toolBarRight.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionPause.setText(_translate("MainWindow", "pause"))
        self.actionPause.setToolTip(_translate("MainWindow", "Pause Currently Playing Media"))
        self.actionPlayPlaylist.setText(_translate("MainWindow", "PlayPlaylist"))
        self.actionPlayPlaylist.setToolTip(_translate("MainWindow", "Play Current Playlist"))
        self.actionNext.setText(_translate("MainWindow", "Next"))
        self.actionNext.setToolTip(_translate("MainWindow", "Go To Next Item In Playlist"))
        self.actionPrevious.setText(_translate("MainWindow", "Previous"))
        self.actionPrevious.setToolTip(_translate("MainWindow", "Go To Previous Item In Playlist"))
        self.actionStream.setText(_translate("MainWindow", "Stream"))
        self.actionStream.setToolTip(_translate("MainWindow", "Upload And Play A Local File Immediately"))
        self.actionAppend.setText(_translate("MainWindow", "Append"))
        self.actionAppend.setToolTip(_translate("MainWindow", "Append Current Item To Playlist"))
        self.actionRemove.setText(_translate("MainWindow", "Remove"))
        self.actionRemove.setToolTip(_translate("MainWindow", "Remove Current Item From Playlist"))
        self.actionMute.setText(_translate("MainWindow", "Mute"))
        self.actionMute.setToolTip(_translate("MainWindow", "Mute or Unmute Player"))
        self.actionFullscreen.setText(_translate("MainWindow", "Fullscreen"))
        self.actionFullscreen.setToolTip(_translate("MainWindow", "Toggle Fullscreen Player"))
        self.actionRefreshFiles.setText(_translate("MainWindow", "RefreshFiles"))
        self.actionRefreshFiles.setToolTip(_translate("MainWindow", "Load Or Refresh The Remote File List"))
        self.actionUpload.setText(_translate("MainWindow", "Upload"))
        self.actionUpload.setToolTip(_translate("MainWindow", "Upload A File To The Server\'s Media Directory"))
        self.actionClear.setText(_translate("MainWindow", "Clear"))
        self.actionClear.setToolTip(_translate("MainWindow", "Clears The Playlist"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionRepeat.setText(_translate("MainWindow", "Repeat"))
        self.actionRepeat.setToolTip(_translate("MainWindow", "Toggles Repeat On The Player"))
        self.actionStop.setText(_translate("MainWindow", "Stop"))
        self.actionStop.setToolTip(_translate("MainWindow", "Stop Currently Playing Video or Playlist"))
